/**
 * CS 141: Introduction to Programming and Problem Solving
 * Professor: Edwin Rodr&iacute;guez
 *
 * Programming Assignment #4
 *
 * <description-of-assignment>
 *
 * Team Jedi
 *   Alec Shay
 *   Alejandro Diaz
 *   Alejandro Landeros
 *   David Scianni
 *   Luiz Romero
 */
package edu.csupomona.cs.cs141.Assignment4;

import Person;

/**
 * The Player class represents the user who is playing the game. He or she will
 * be holding a blaster of type {@link Gun}, which they can shoot at a Jedi. The
 * player will have a set number of lives, and when that number reaches 0, the
 * game will end. During their turn, the player has the option to either move
 * one space, (up, down, left, or right), look ahead 2 spaces, or shoot their
 * blaster, hopefully hitting a Jedi in the process. The player may also pick up
 * a power-up item that is located on one of the regular spaces.
 * 
 * @author David Scianni
 * 
 */
public class Player extends Person {
	/**
	 * This is the gun that the player will use to try to stop the Jedi from
	 * attacking. The blaster will start with only one shot, so the player must
	 * use the shot wisely.
	 */
	private Gun blaster;
	/**
	 * This determines how many lives the player has left. It will be from
	 * {@code 0 <= x <= 4}. When it reaches 0, the game will end.
	 */
	private int lives;
	/**
	 * This will keep track of how many turns the player is invincible to Jedi
	 * attacks.
	 */
	private int invincibilityCounter;

	/**
	 * The player constructor will call the constructor of the super class, and
	 * will set the player's location, construct the player's gun, their
	 * beginning amount of lives, and beginning invincibilityCounter.
	 */
	public Player() {

	}

	/**
	 * When the die method is called, the player's lives will be reduced by 1,
	 * and their location will be reset to the beginning location. Also, if
	 * {@code lives = 0}, then it will call an exception that will end the game.
	 */
	public void die() {

	}

	/**
	 * This method will move the player's location to the next spot in one
	 * place. the integer d will determine the direction of the movement.
	 * 
	 * @param d
	 *            determines which way the player moves (1 for up, 2 for right,
	 *            3 for down, and 4 for left).
	 */
	public void move(int d) {

	}

	/**
	 * The shoot method will 
	 * @param d
	 */
	public void shoot(int d) {

	}

	public int look(int d) {

	}

	public void pickUp() {

	}

	public int getLives() {

	}

	public int getInvincibilityCounter() {

	}

	public void setInvincibilityCounter(int a) {

	}
}
